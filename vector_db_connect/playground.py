
import datasets

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import Cassandra
from langchain.document_loaders import TextLoader


def load_articles(n=4):
    """ Loads N articles from the 'cnn_dailymail' dataset, in streaming mode """
    dataset = datasets.load_dataset("cnn_dailymail", '3.0.0', split="train", streaming=True)
    data = dataset.take(n)
    return [d['article'] for d in data]

articles = load_articles()
print(type(articles))



text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
documents = text_splitter.create_documents(str(articles))  # creates Document objects from the text in the articles
document_chunks = text_splitter.split_documents(documents) 



embedding_function = OpenAIEmbeddings(openai_api_key='')



# embedding = OpenAIEmbeddings(openai_api_key='sk-')
# splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
# documents = splitter.create_documents(articles)  # creates Document objects from the text in the articles
# document_chunks = splitter.split_documents(documents)  # splits the Documents into chunks


from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json

# This secure connect bundle is autogenerated when you donwload your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': 'vector_db_connect/secure-connect-vector-db.zip'
}

# This token json file is autogenerated when you donwload your token, 
# if yours is different update the file name below
with open("vector_db_connect/vector_db-token.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()
print(session)

row = session.execute("select release_version from system.local").one()
if row:
  print(row[0])
else:
  print("An error occurred.")

the_vectorstore = Cassandra.from_documents(
    documents=document_chunks,
    embedding=embedding_function,
    session=session,
    keyspace='vector_db_keyspace', 
    table_name='cnn_vectors'
)
